1. POlymorphism ()

using System;
					
public class Program
{
	int a = 6, b= 7;
	public void mul(int a, int b)
	{
		Console.WriteLine("Multiplication is "+(a*b));
	}
	public void mul()
	{
		Console.WriteLine("Multiplicaton is " + (a * b));
	}
	
	public int mul(int a, int b,int c)
	{
		return (a*b);
	}
	public static void Main(string[] args)
	{
		Program p = new Program();
		p.mul(4,5);
		p.mul();
		Console.WriteLine( "Multiplication is "+ p.mul(7,2,3));
	}
}

2.OPERATOR OVERLOADING

using System;
			
class Sum
{
	public int num1, num2;
	public Sum(int num1, int num2)
	{
		this.num1 = num1;
		this.num2 = num2;
	}
	public static Sum operator +(Sum s1, Sum s2)
	{
		Sum s3 = new Sum(0,0);
		s3.num1 = s1.num1 + s2.num1;
		s3.num1 = s2.num1 + s2.num1;
		return s3;
	}
}
public class Program
{
	public static void Main(string[] args)
	{
		Sum s1 = new Sum(1,2);
		Sum s2 = new Sum(2,2);
		Sum s3 = new Sum(0,0);
		Console.WriteLine("values before sum num1 is:  "+ s3.num1 + "  num2 is:  "+ s3.num2);
		s3 = s1 + s2;
		Console.WriteLine("values after sum num1 is: "+ s3.num1 + "  num2 is:  "+ s3.num2);
		Console.ReadLine();
		
	}
}

3. OVERRIDING (SHOWDING)
using System;
			
class Baseclass
{
	public void print()
	{
		Console.WriteLine("inside base class");
	}
}
class Derived: Baseclass
{
	new public void print()           //showding
	{
		Console.WriteLine("inside Derived class");
	}	
}
public class Program
{
	public static void Main(string[] args)
	{
		// Derived d = new  Derived();
		//d.print();
		
		//Baseclass b = new  Derived();
		//b.print();
		
		Baseclass b = new Baseclass();
		b.print();
		
		b= new Derived();
		b.print();
		Console.ReadLine();
	}
}

4.OVERRIFING ()

using System;
			
public class Baseclass
{
	int n1, n2;
	public Baseclass()
	{
		Console.WriteLine("base class constructoer");
	}
	public Baseclass(int i, int j)
	{
		n1= i;
		n2= j;
		Console.WriteLine("parametrise constructor");
		Console.WriteLine("values are "+ n1+ " and "+n2);
	}
	public virtual void swap()
	{
		Console.WriteLine("swap function");
	}
}
public class Derived: Baseclass
{
	public Derived() : base(){}
	public Derived(int i, int j) : base(i,j){base.swap();}
	
	
}

public class Program
{
	public static void Main(string[] args)
	{
		Derived d = new Derived();
		Derived d1 = new Derived(10,20);
		
		Console.ReadLine();
	}
}

5. Example code(person, student, teacher)

using System;
public class person
{
	public string name;
	public person(string name)
	{
		this.name = name;
	}
		 public override string ToString()
		{
			return name;
		}
	}

public class Student: person
{
	public Student(string name):base(name){}
	
	public void study()
	{
		Console.WriteLine("student "+ name + " is studying");
	}
}
public class Teacher: person
{
	public Teacher(string name):base(name){}
	public void explain()
	{
		Console.WriteLine("Teacher " +name +" is explaining");
	}
}
public class Program
{
	public static void Main(string[] args)
	{
		Student s1 = new Student("Urjita");
		s1.study();
		Teacher t = new Teacher("Asha");
		t.explain();
		person p = new person("person");
		Console.WriteLine(p.ToString());
		
		Console.ReadLine();
	}
}

6.(person, student, teacher)

using System;

 using System.Collections.Generic;

 using System.Linq;

 using System.Text;

 using System.Threading.Tasks;
 
namespace Day_4

 {

     public class Person

     {

         public string Name { get; set; }

         public Person(string Name)

         {

             this.Name = Name;

         }

         public override string ToString()

         {

             return "Hello! My name is "+Name; 

         }

         ~Person()

         {

             Name = string.Empty;

         }

     }

     public class Teacher:Person

     {

         public Teacher(string name):base(name)

         {

             Name = name;

         }

         public void Explain()

         {

             Console.WriteLine("Explain");

         }

     }

     public class Student:Person

     {

         public Student(string name) : base(name)

         {

             Name = name;

         }

         public void Study()

         {

             Console.WriteLine("Study");

         }

     }
 
    class Class4

     {

         public static void Main()

         {
 
            int Total = 3;
 
            Person[] people = new Person[Total];

             int[] a = new int[2];
 
            for (int i = 0; i < Total; i++)

             {

                 if(i==0)

                 {

                     people[i] = new Teacher(Console.ReadLine());
 
                }

                 else

                 {

                     people[i] = new Student(Console.ReadLine());

                 }
 
            }

             for (int i = 0; i < Total; i++)

             {

                 if(i==0)

                 {

                     ((Teacher)people[i]).Explain();

                     float p=(float)a[0];

                 }

                 else

                 {

                     ((Student)people[i]).Study();

                 }

             }

             Console.ReadLine();

         }

     }

 }

7. Example code (shape, rectangle, circle)

using System;

class Shape
{
	public double Area()
	{
		return 0;
	}
	public double Perimeter()
	{
		return 0;
	}
}
class Rectangle: Shape
{
	double side1, side2;
	public Rectangle(double side1, double side2)
	{
		this.side1 = side1;
		this.side2 = side2;
	}
	public double Area()
	{
		return(side1*side2);
	}
	public double Perimeter()
	{
		return(2*(side1+side2));
	}
}
class Circle: Shape
{
	double radius;
	public Circle(double radius)
	{
		this.radius = radius;
	}
	public double Area()
	{
		return ((22/7)*(radius*radius));
	}
	public double Perimeter()
	{
		return(2*(22/7)*radius);
	}
}
public class Program
{
	public static void Main(string[] args)
	{
		Rectangle r = new Rectangle(3.5 , 2.5);
		Console.WriteLine("Area of rectangle "+ r.Area());
		Console.WriteLine("Perimeter of rectangle "+ r.Perimeter());
		
		Circle c = new Circle(2.5);
		Console.WriteLine("Area of circle "+ c.Area());
		Console.WriteLine("Perimeter of circle "+ c.Perimeter());
		
		Console.ReadLine();
	}
}